//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
    action();
  }
#endif

#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action()
  {

    HSystem sys = new HSystem();

    // Local iconic variables 

    HObject ho_Image, ho_ImageGray, ho_Regions;
    HObject ho_RegionDilation, ho_ConnectedRegions, ho_SelectedRegions;
    HObject ho_SortedRegions, ho_SingleWord=null;

    // Local control variables 

    HTuple hv_Number = null, hv_words = null, hv_TrainFile = null;
    HTuple hv_i = new HTuple(), hv_FontFile = new HTuple();
    HTuple hv_CharacterNames = new HTuple(), hv_CharacterCount = new HTuple();
    HTuple hv_NumHidden = new HTuple(), hv_OCRHandle = new HTuple();
    HTuple hv_Error = new HTuple(), hv_ErrorLog = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_ImageGray);
    HOperatorSet.GenEmptyObj(out ho_Regions);
    HOperatorSet.GenEmptyObj(out ho_RegionDilation);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_SortedRegions);
    HOperatorSet.GenEmptyObj(out ho_SingleWord);
    //Image Acquisition 01: Code generated by Image Acquisition 01
    ho_Image.Dispose();
    HOperatorSet.ReadImage(out ho_Image, "C:/Users/14499/Desktop/1.PNG");


    ho_ImageGray.Dispose();
    HOperatorSet.Rgb3ToGray(ho_Image, ho_Image, ho_Image, out ho_ImageGray);

    ho_Regions.Dispose();
    HOperatorSet.Threshold(ho_ImageGray, out ho_Regions, 0, 109);

    ho_RegionDilation.Dispose();
    HOperatorSet.DilationCircle(ho_Regions, out ho_RegionDilation, 1.5);
    ho_ConnectedRegions.Dispose();
    HOperatorSet.Connection(ho_RegionDilation, out ho_ConnectedRegions);

    ho_SelectedRegions.Dispose();
    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", 
        "and", 50, 1223.71);
    ho_SortedRegions.Dispose();
    HOperatorSet.SortRegion(ho_SelectedRegions, out ho_SortedRegions, "character", 
        "true", "row");
    HOperatorSet.CountObj(ho_SortedRegions, out hv_Number);
    hv_words = new HTuple();
    hv_words[0] = "A";
    hv_words[1] = "B";
    hv_words[2] = "C";
    hv_words[3] = "D";
    hv_words[4] = "E";
    hv_words[5] = "F";
    hv_words[6] = "G";
    hv_words[7] = "H";
    hv_words[8] = "I";
    hv_words[9] = "J";
    hv_words[10] = "K";
    hv_words[11] = "L";
    hv_words[12] = "M";
    hv_words[13] = "N";
    hv_words[14] = "O";
    hv_words[15] = "P";
    hv_words[16] = "Q";
    hv_words[17] = "R";
    hv_words[18] = "S";
    hv_words[19] = "T";
    hv_words[20] = "U";
    hv_words[21] = "V";
    hv_words[22] = "W";
    hv_words[23] = "X";
    hv_words[24] = "Y";
    hv_words[25] = "Z";
    hv_TrainFile = "e:/testWords.trf";
    // (dev_)set_check ("~give_error")
    try
    {
            HOperatorSet.DeleteFile(hv_TrainFile);
    }
    catch(HalconException e)
    {
      int error = e.GetErrorCode();
      if (error < 0)
        throw e;
    }
    // (dev_)set_check ("~give_error")
    HTuple end_val19 = hv_Number;
    HTuple step_val19 = 1;
    for (hv_i=1; hv_i.Continue(end_val19, step_val19); hv_i = hv_i.TupleAdd(step_val19))
    {
      try
      {
                ho_SingleWord.Dispose();
        HOperatorSet.SelectObj(ho_SortedRegions, out ho_SingleWord, hv_i);
      }
      catch(HalconException e)
      {
        int error = e.GetErrorCode();
        if (error < 0)
          throw e;
      }
      try
      {
                HOperatorSet.AppendOcrTrainf(ho_SingleWord, ho_Image, hv_words.TupleSelect(
            hv_i-1), hv_TrainFile);
      }
      catch(HalconException e)
      {
        int error = e.GetErrorCode();
        if (error < 0)
          throw e;
      }
    }
    //训练ocr
    hv_FontFile = "e:/testWords.omc";
    //读取训练文件
    try
    {
            HOperatorSet.ReadOcrTrainfNames(hv_TrainFile, out hv_CharacterNames, out hv_CharacterCount);
    }
    catch(HalconException e)
    {
      int error = e.GetErrorCode();
      if (error < 0)
        throw e;
    }
    hv_NumHidden = 100000;
    //自己创建神经网络分类器

    try
    {
            HOperatorSet.CreateOcrClassMlp(10, 20, "constant", "default", hv_CharacterNames, 
          hv_NumHidden, "none", 10, 42, out hv_OCRHandle);
    }
    catch(HalconException e)
    {
      int error = e.GetErrorCode();
      if (error < 0)
        throw e;
    }

    //这里采用halcon预训练模型；第二次及以后训练先将文件名改为FontFile，调用已训练的参数继续训练

    //read_ocr_class_mlp ('HandWritten_0-9.omc', OCRHandle)
    //read_ocr_class_mlp ('Document_A-Z+_NoRej.omc', OCRHandle)
    try
    {
            HOperatorSet.ReadOcrClassMlp("Industrial_A-Z+_Rej.omc", out hv_OCRHandle);
    }
    catch(HalconException e)
    {
      int error = e.GetErrorCode();
      if (error < 0)
        throw e;
    }
    //训练

    try
    {
            HOperatorSet.TrainfOcrClassMlp(hv_OCRHandle, hv_TrainFile, 200, 1, 0.01, out hv_Error, 
          out hv_ErrorLog);
    }
    catch(HalconException e)
    {
      int error = e.GetErrorCode();
      if (error < 0)
        throw e;
    }

    //保存参数到自己命名的文件

    try
    {
            HOperatorSet.WriteOcrClassMlp(hv_OCRHandle, hv_FontFile);
    }
    catch(HalconException e)
    {
      int error = e.GetErrorCode();
      if (error < 0)
        throw e;
    }

    //释放内存

    try
    {
            HOperatorSet.ClearOcrClassMlp(hv_OCRHandle);
    }
    catch(HalconException e)
    {
      int error = e.GetErrorCode();
      if (error < 0)
        throw e;
    }















    ho_Image.Dispose();
    ho_ImageGray.Dispose();
    ho_Regions.Dispose();
    ho_RegionDilation.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_SelectedRegions.Dispose();
    ho_SortedRegions.Dispose();
    ho_SingleWord.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

